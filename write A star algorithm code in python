

def AStarAlgorithm(start, goal):
    # Create an empty set to store visited nodes
    visited = set()
    
    # Create an empty priority queue
    queue = PriorityQueue()
    
    # Create a start node and push it to the queue
    start_node = Node(None, start)
    queue.put(start_node)
    
    # Loop until the queue is empty
    while not queue.empty():
        # Pop the node with the highest priority
        current_node = queue.get()
        
        # Check if the current node is the goal
        if current_node.position == goal:
            path = []
            while current_node != None:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1] # Return the reversed path
        
        # Mark the node as visited
        visited.add(current_node.position)
        
        # Generate the children nodes
        children = []
        for new_position in get_children(current_node.position):
            # Create a new node
            new_node = Node(current_node, new_position)
            
            # Append the new node to the children list
            children.append(new_node)
        
        # Loop through the children
        for child in children:
            # Check if the child has been visited
            if child.position not in visited:
                # Calculate the child's cost
                cost = calculate_cost(child.position)
                
                # Calculate the child's priority
                priority = cost + calculate_heuristic(child.position, goal)
                
                # Push the child to the queue
                queue.put(child, priority)
    
    return "No Path Found"